class StNode{
    public:
        int val;
        int l,r;
        StNode* left,*right;
};
class SegmentTree{
    StNode* root;
    int defaultVal=0;//when segment is empty(change1)
    int stFun(int x,int y){
        return max(x,y);//change it to required fun(change2)
    }
    void build(StNode* root,vector<int>& v,int l,int r){
        if(l>r)return;
        if(l==r){
            root->val=v[l];
            root->l=l;
            root->r=r;
            return;
        }
        int mid=(l+r)/2;
        root->left=new StNode();
        root->right=new StNode();
        build(root->left,v,l,mid);
        build(root->right,v,mid+1,r);
        root->val=stFun(root->left->val,root->right->val);
        root->l=l;
        root->r=r;
    }
    int inquery(StNode* root,int l,int r){
        if(l>r)return defaultVal;
        if(root->l==l && root->r==r)return root->val;
        int mid=(root->l+root->r)/2;
        return stFun(inquery(root->left,l,min(mid,r)),
                     inquery(root->right,max(mid+1,l),r));
    }
    void inupdate(StNode* root,int l,int r,int val){
        if(l>r)return;
        if(root->l==root->r){
            root->val=val;
            return;
        }
        int mid=(root->l+root->r)/2;
        inupdate(root->left,l,min(mid,r),val);
        inupdate(root->right,max(mid+1,l),r,val);
        root->val=stFun(root->left->val,root->right->val);
    }
    public:
        SegmentTree(vector<int>& v){
            root=new StNode();
            build(root,v,0,v.size()-1);
        }
        int query(int l,int r){
           return inquery(root,l,r);
        }
        void update(int l,int r,int val){
            //to update a particular point: l==r==indexOfUpdate
            inupdate(root,l,r,val);
        }
};

//SegmentTree st(nums); //creates segment tree with vector nums
//st.query(0,5);        //returns answer of range [0 to 5]
//st.update(0,4,3);     //update values of range [0 to 4] to value 3
