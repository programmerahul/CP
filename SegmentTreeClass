#define ll long long
class StNode{
    public:
        ll val;
        ll l,r;
        bool mark;//for lazy propagation(marked means this subtree needs update)
        StNode* left,*right;
        StNode(){
            mark=0;
            left=right=NULL;
        }
};
class SegmentTree{
    StNode* root;
    ll defaultVal=0;//when segment is empty(change1)
    ll stFun(ll x,ll y){
        return max(x,y);//change it to required fun(change2)
    }
    void build(StNode* root,vector<ll>& v,ll l,ll r){
        if(l>r)return;
        if(l==r){
            root->val=v[l];
            root->l=l;
            root->r=r;
            return;
        }
        ll mid=(l+r)/2;
        root->left=new StNode();
        root->right=new StNode();
        build(root->left,v,l,mid);
        build(root->right,v,mid+1,r);
        root->val=stFun(root->left->val,root->right->val);
        root->l=l;
        root->r=r;
    }
    void push(StNode* root){
        if (root->mark) {
            root->left->val=root->right->val=root->val;
            root->left->mark=root->right->mark = true;
            root->mark = false;
        }
    }
    ll inquery(StNode* root,ll l,ll r){
        if(l>r)return defaultVal;
        if((root->l==l) && (root->r==r))return root->val;
        push(root);
        ll mid=(root->l+root->r)/2;
        return stFun(inquery(root->left,l,min(mid,r)),
                     inquery(root->right,max(mid+1,l),r));
    }
    void inupdate(StNode* root,ll l,ll r,ll val){
        if(l>r)return;
        if(root->l==l && root->r==r){
           root->val=val;
           root->mark=true;
        }else{
            push(root);
            ll mid=(root->l+root->r)/2;
            inupdate(root->left,l,min(mid,r),val);
            inupdate(root->right,max(mid+1,l),r,val);
            root->val=stFun(root->left->val,root->right->val);
        }
    }
    public:
        SegmentTree(vector<ll>& v){
            root=new StNode();
            build(root,v,0,v.size()-1);
        }
        ll query(ll l,ll r){
           return inquery(root,l,r);
        }
        void update(ll l,ll r,ll val){
            //to update a particular poll: l==r==indexOfUpdate
            inupdate(root,l,r,val);
        }
};

//SegmentTree st(nums); //creates segment tree with vector nums
//st.query(0,5);        //returns answer of range [0 to 5]
//st.update(0,4,3);     //update values of range [0 to 4] to value 3
